模板：template,主要分为函数模板，类模板两种用法
template <typename T>
inline T Max(const T &a, const T &b) {
	return a > b ? a : b;
}
*******************************
template <class T>
class Container {
public:
	T Pop();
	void Push(const T &a);
private:
	vector<T> sta;
};

1、面向对象的三大特性：封装、继承、多态
2、类的访问权限：private、protected、public
3、类的构造函数、析构函数、赋值函数、拷贝函数
Message& operator==(const Message &m) {//赋值函数
	return *this;
}
Message(const Message &obj){//拷贝函数(复制一个对象到一个新对象)
	//这里进行拷贝操作
}
4、移动构造函数与拷贝构造函数对比*
5、深拷贝与浅拷贝的区别
6、空类有哪些函数？空类的大小？*
7、内存分区：全局区、堆区、栈区、常量区、代码区*
1.栈，就是那些由编译器在需要的时候分配，在不需要的时候自动清除变量的存储区。
里面的变量通常是局部变量、函数参数等。
2.堆，就是那些由new分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，
一般一个new就要对应一个delete。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。
3. 全局区（静态区） －－ 全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在
一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束释放
4.常量存储区:存放的是常量,是不允许修改的
5.代码区：​ 程序被操作系统加载到内存时，所有可执行的代码被加载到代码区，也叫代码段，存储程序的代码指令。
程序运行时，这段区域数据不可被修改只可以被执行
***********************************
8、C++与C的区别*
9、struct与class的区别
使用 class 时，类中的成员默认都是 private 属性的；而使用 struct 时，结构体中的成员默认都是 public 属性的。
class 继承默认是 private 继承，而 struct 继承默认是 public 继承（《C++继承与派生》一章会讲解继承）。
class 可以使用模板，而 struct 不能
10、struct内存对齐
11、new/delete与malloc/free的区别
12、内存泄露的情况*
内存泄漏（Memory Leak）是指程序中已动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，
导致程序运行速度减慢甚至系统崩溃等严重后果
良好的编码习惯,尽量在涉及内存的程序段,检测出内存泄露 使用了内存分配的函数,要记得要使用其想用的函数释放掉
13、sizeof与strlen对比
1. sizeof可以用类型做参数，也可以用数组、指针，对象和函数做参数；strlen只能用char*做参数，且必须是以''\0''结尾
当数组名作为参数传入时，实际上数组就退化成指针了。
2. sizeof返回存储对象实际占用的字节大小；strlen的功能是返回字符串的长度，遇到/0就停止，不包含/0。
**************************
14、指针与引用的区别
15、野指针产生与避免
https://blog.csdn.net/l477918269/article/details/89949858
16、多态：动态多态、静态多态
静态多态有两种实现方式：
函数重载：包括普通函数的重载和成员函数的重载
函数模板的使用
动态多态（动态绑定）：即运行时的多态，在程序执行期间(非编译期)
判断所引用对象的实际类型，根据其实际类型调用相应的方法。
*********************************************************************
17、虚函数实现动态多态的原理、虚函数与纯虚函数的区别
class Base
{   
public :
    virtual void FunTest1( int _iTest){cout <<"Base::FunTest1()" << endl;}
};
class Derived : public Base
{
public :
    void FunTest1( int _iTest){cout <<"Derived ::FunTest1()" << endl;}
}
18、继承时，父类的析构函数是否为虚函数？构造函数能不能为虚函数？为什么？*
19、静态多态：重写、重载、模板
20、static关键字：修饰局部变量、全局变量、类中成员变量、类中成员函数
21、const关键字：修饰变量、指针、类对象、类中成员函数
22、extern关键字：修饰全局变量
23、volatile关键字：避免编译器指令优化
24、四种类型转换：static_cast、dynamic_cast、const_cast、reinterpret_cast
25、右值引用
26、std::move函数
27、四种智能指针及底层实现：auto_ptr、unique_ptr、shared_ptr、weak_ptr
https://www.cnblogs.com/yyxt/p/3978911.html
unique_ptr和auto_ptr差不多：使用只能做一次操作，无法进行复制操作，auto_ptr已弃用
shared_ptr:分享,可以复制,有引用计数
weak_ptr:分享,可以复制,引用计数=1
和C#中new出来的对象一样，过了生命周期直接释放,无需delete释放
28、shared_ptr中的循环引用怎么解决？（weak_ptr）
29、vector与list比较
30、vector迭代器失效的情况
31、map与unordered_map对比
32、set与unordered_set对比
33、STL容器空间配置器
34.计时器
